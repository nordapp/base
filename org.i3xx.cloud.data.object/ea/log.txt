
---------- SpringDataService ----------
Package
{
  name="SpringBoot DataRepo Model"
  namespaceroot="true"
Package
{
  notes=""
  scope="Public"
  version="1.0"
  author="Stefan Hauptmann"
  alias=""
  name="com"
  stereotype=""
Package
{
  notes=""
  scope="Public"
  version="1.0"
  author="Stefan Hauptmann"
  alias=""
  name="i3xx"
  stereotype=""
Package
{
  notes=""
  scope="Public"
  version="1.0"
  author="Stefan Hauptmann"
  alias=""
  name="cloud"
  stereotype=""
Package
{
  notes=""
  scope="Public"
  version="1.0"
  author="Stefan Hauptmann"
  alias=""
  name="data"
  stereotype=""
Package
{
  notes=""
  scope="Public"
  version="1.0"
  author="Stefan Hauptmann"
  alias=""
  name="op"
  stereotype=""
Package
{
  notes=""
  scope="Public"
  version="1.0"
  author="Stefan Hauptmann"
  alias=""
  name="domain"
  stereotype=""
		Opadresse obj = getObject(guid);
		if(obj==null) {
			obj = getOrCreateObject(uuid, history);
		}
		return obj;
Class
{
  XRef{namespace="SpringDataService" name="Class" source="{25FE7EFB-7EB7-4045-A374-592921369464}"}
  notes=""
  scope="Public"
  multiplicity=""
  version="1.0"
  author="Stefan"
  alias=""
  complexity="1"
  concurrency=""
  persistence=""
  arguments=""
  phase="1.0"
  status="Proposed"
  visibility=""
  cardinality=""
  language="Java"
  stereotype="data object"
  name="OpadresseService"
  
  Tag
  {
    name="annotations"
	value="@Service"
  }
  
  Attribute
  {
	name="opadresseRepository"
	type="OpadresseRepository"
	scope="Private"
	
	Tag
	{
      name="annotations"
	  value="@Autowired"
	}
  }
  
  
  Operation
  {
	name="getObject"
	type="Opadresse"
	stereotype="builtin"
	
	code="List<Opadresse> list = opadresseRepository.queryByGuid(guid);
if(!list.isEmpty()){
	return list.get(0);
}
"
	
	Parameter
	{
		name="guid"
		type="long"
	}
 	
	Tag
	{
	  name="annotations"
	  value="@Transient"
	}
  }
  
  
  Operation
  {
	name="getOrCreateObject"
	type="Opadresse"
	stereotype="builtin"
	
	code="List<Opadresse> list = opadresseRepository.queryByUuidAndHistory(uuid, history);
Opadresse obj = null;
if(list.isEmpty()){
	obj = new Opadresse();
	obj.setUuid(uuid);
	obj.setHistory(history);
}else{
	obj = list.get(0);
}
return obj
"
  
	Parameter
	{
		name="uuid"
		type="String"
	}
  
	Parameter
	{
		name="history"
		type="String"
	}
	
	Tag
	{
	  name="annotations"
	  value="@Transient"
	}
  }
  
  
  Operation
  {
 	name="getOrCreateObject"
	type="Opadresse"
	stereotype="builtin"
	
	code="Opadresse obj = getObject(guid);
if(obj==null) {	obj = getOrCreateObject(uuid, history);}return obj;"
 
	Parameter
	{
		name="guid"
		type="long"
	}
  
	Parameter
	{
		name="uuid"
		type="String"
	}
  
	Parameter
	{
		name="history"
		type="String"
	}
	
	Tag
	{
	  name="annotations"
	  value="@Transient"
	}
  }
  
  
  Operation
  {
	name="version"
	type="String"
	stereotype="builtin"
	
	code="return \"12-Jan-2017 16:44:30\";"
	
	Tag
	{
	  name="annotations"
	  value="@Transient"
	}
  }
  
}
}
}
}
}
}
}
}